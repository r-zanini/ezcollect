# Configuration

db {
	## JDBC Datasource
	# https://www.playframework.com/documentation/latest/JavaDatabase
	# https://www.playframework.com/documentation/latest/ScalaDatabase
	# ~~~~~
	# Once JDBC datasource is set up, you can work with several different
	# database options:
	#Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
	#JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
	#EBean: https://playframework.com/documentation/latest/JavaEbean
	#Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
	# ~~~~~
	# You can declare as many datasources as you want.
	# By convention, the default datasource is named `default`
	# https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
	default {
		driver = org.h2.Driver
		url = "jdbc:h2:file:./data/ezcollect" #db persists in a file on the HDD
		#url = "jdbc:h2:mem:ezcollect-testDB" #db is kept in memory and wiped every time project is closed
		username = "sa"
		#password = "pwd"
	}
	# You can turn on SQL logging for any datasource
	# https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
	#default.logSql=true
}

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
ebean.default="models.*"

# Assets configuration
# ~~~~~
"assets.cache./public/stylesheets/bootstrap.min.css"="max-age=3600"

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

# Set Hikari to fixed size
play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}
